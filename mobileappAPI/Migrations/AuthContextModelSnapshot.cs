// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using mobileappAPI.Authentication;

namespace mobileappAPI.Migrations
{
    [DbContext(typeof(AuthContext))]
    partial class AuthContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("mobileappAPI.Authentication.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("UsuarioIdusuario")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UsuarioIdusuario");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("mobileappAPI.Models.Carro", b =>
                {
                    b.Property<int>("Idcarro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDCarro")
                        .UseIdentityColumn();

                    b.Property<string>("Año")
                        .IsRequired()
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .IsFixedLength(true);

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<int>("Idcategoria")
                        .HasColumnType("int")
                        .HasColumnName("IDCategoria");

                    b.Property<int>("Idmarca")
                        .HasColumnType("int")
                        .HasColumnName("IDMarca");

                    b.Property<int>("Idpropietario")
                        .HasColumnType("int")
                        .HasColumnName("IDPropietario");

                    b.Property<string>("Modelo")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Placa")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("char(15)")
                        .IsFixedLength(true);

                    b.HasKey("Idcarro")
                        .HasName("PK__Carro__D9C60BA6B1494B17");

                    b.HasIndex("Idcategoria");

                    b.HasIndex("Idmarca");

                    b.HasIndex("Idpropietario");

                    b.ToTable("Carro");
                });

            modelBuilder.Entity("mobileappAPI.Models.Categorium", b =>
                {
                    b.Property<int>("Idcategoria")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDCategoria")
                        .UseIdentityColumn();

                    b.Property<string>("NombreCategoria")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Idcategoria")
                        .HasName("PK__Categori__70E82E28DC5E70ED");

                    b.ToTable("Categorium");
                });

            modelBuilder.Entity("mobileappAPI.Models.Marca", b =>
                {
                    b.Property<int>("Idmarca")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDMarca")
                        .UseIdentityColumn();

                    b.Property<string>("Marca1")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("Marca");

                    b.HasKey("Idmarca")
                        .HasName("PK__Marca__CEC375E7E0BE3AFA");

                    b.ToTable("Marca");
                });

            modelBuilder.Entity("mobileappAPI.Models.Post", b =>
                {
                    b.Property<int>("Idpost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDPost")
                        .UseIdentityColumn();

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(144)
                        .IsUnicode(false)
                        .HasColumnType("varchar(144)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.Property<int>("Idcarro")
                        .HasColumnType("int")
                        .HasColumnName("IDCarro");

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(11,2)");

                    b.HasKey("Idpost")
                        .HasName("PK__Post__8B0115BDB10C44CE");

                    b.HasIndex(new[] { "Idcarro" }, "UQ__Post__D9C60BA74690D2BC")
                        .IsUnique();

                    b.ToTable("Post");
                });

            modelBuilder.Entity("mobileappAPI.Models.Reservacion", b =>
                {
                    b.Property<int>("Idreservacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDReservacion")
                        .UseIdentityColumn();

                    b.Property<DateTime>("FechaEntrega")
                        .HasColumnType("date");

                    b.Property<DateTime>("FechaSalida")
                        .HasColumnType("date");

                    b.Property<int>("Idcarro")
                        .HasColumnType("int")
                        .HasColumnName("IDCarro");

                    b.Property<int>("Idcliente")
                        .HasColumnType("int")
                        .HasColumnName("IDCliente");

                    b.Property<int>("IdtipoReservacion")
                        .HasColumnType("int")
                        .HasColumnName("IDTipoReservacion");

                    b.HasKey("Idreservacion")
                        .HasName("PK__Reservac__E970411B49959C30");

                    b.HasIndex("Idcarro");

                    b.HasIndex("Idcliente");

                    b.HasIndex("IdtipoReservacion");

                    b.ToTable("Reservacion");
                });

            modelBuilder.Entity("mobileappAPI.Models.TipoReservacion", b =>
                {
                    b.Property<int>("IdtipoReservacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDTipoReservacion")
                        .UseIdentityColumn();

                    b.Property<string>("Alcance")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("IdtipoReservacion")
                        .HasName("PK__TipoRese__138344961896CBF2");

                    b.ToTable("TipoReservacion");
                });

            modelBuilder.Entity("mobileappAPI.Models.Usuario", b =>
                {
                    b.Property<int>("Idusuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDUsuario")
                        .UseIdentityColumn();

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Celular")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("char(15)")
                        .IsFixedLength(true);

                    b.Property<DateTime?>("FechaRegistro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("char(15)")
                        .IsFixedLength(true);

                    b.HasKey("Idusuario")
                        .HasName("PK__Usuario__52311169D789E966");

                    b.ToTable("Usuario");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("mobileappAPI.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("mobileappAPI.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("mobileappAPI.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("mobileappAPI.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("mobileappAPI.Authentication.ApplicationUser", b =>
                {
                    b.HasOne("mobileappAPI.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioIdusuario");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("mobileappAPI.Models.Carro", b =>
                {
                    b.HasOne("mobileappAPI.Models.Categorium", "IdcategoriaNavigation")
                        .WithMany("Carros")
                        .HasForeignKey("Idcategoria")
                        .HasConstraintName("FK__Carro__Placa__4316F928")
                        .IsRequired();

                    b.HasOne("mobileappAPI.Models.Marca", "IdmarcaNavigation")
                        .WithMany("Carros")
                        .HasForeignKey("Idmarca")
                        .HasConstraintName("FK__Carro__IDMarca__440B1D61")
                        .IsRequired();

                    b.HasOne("mobileappAPI.Models.Usuario", "IdpropietarioNavigation")
                        .WithMany("Carros")
                        .HasForeignKey("Idpropietario")
                        .HasConstraintName("FK__Carro__IDPropiet__44FF419A")
                        .IsRequired();

                    b.Navigation("IdcategoriaNavigation");

                    b.Navigation("IdmarcaNavigation");

                    b.Navigation("IdpropietarioNavigation");
                });

            modelBuilder.Entity("mobileappAPI.Models.Post", b =>
                {
                    b.HasOne("mobileappAPI.Models.Carro", "IdcarroNavigation")
                        .WithOne("Post")
                        .HasForeignKey("mobileappAPI.Models.Post", "Idcarro")
                        .HasConstraintName("FK__Post__IDCarro__48CFD27E")
                        .IsRequired();

                    b.Navigation("IdcarroNavigation");
                });

            modelBuilder.Entity("mobileappAPI.Models.Reservacion", b =>
                {
                    b.HasOne("mobileappAPI.Models.Carro", "IdcarroNavigation")
                        .WithMany("Reservacions")
                        .HasForeignKey("Idcarro")
                        .HasConstraintName("FK__Reservaci__Fecha__4D94879B")
                        .IsRequired();

                    b.HasOne("mobileappAPI.Models.Usuario", "IdclienteNavigation")
                        .WithMany("Reservacions")
                        .HasForeignKey("Idcliente")
                        .HasConstraintName("FK__Reservaci__IDCli__4E88ABD4")
                        .IsRequired();

                    b.HasOne("mobileappAPI.Models.TipoReservacion", "IdtipoReservacionNavigation")
                        .WithMany("Reservacions")
                        .HasForeignKey("IdtipoReservacion")
                        .HasConstraintName("FK__Reservaci__IDTip__4F7CD00D")
                        .IsRequired();

                    b.Navigation("IdcarroNavigation");

                    b.Navigation("IdclienteNavigation");

                    b.Navigation("IdtipoReservacionNavigation");
                });

            modelBuilder.Entity("mobileappAPI.Models.Carro", b =>
                {
                    b.Navigation("Post");

                    b.Navigation("Reservacions");
                });

            modelBuilder.Entity("mobileappAPI.Models.Categorium", b =>
                {
                    b.Navigation("Carros");
                });

            modelBuilder.Entity("mobileappAPI.Models.Marca", b =>
                {
                    b.Navigation("Carros");
                });

            modelBuilder.Entity("mobileappAPI.Models.TipoReservacion", b =>
                {
                    b.Navigation("Reservacions");
                });

            modelBuilder.Entity("mobileappAPI.Models.Usuario", b =>
                {
                    b.Navigation("Carros");

                    b.Navigation("Reservacions");
                });
#pragma warning restore 612, 618
        }
    }
}
